1793. Maximum Score of a Good Subarray
Hard
885
28
Companies

You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.

 

Example 1:

Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 

Example 2:

Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.

 

Constraints:

    1 <= nums.length <= 105
    1 <= nums[i] <= 2 * 104
    0 <= k < nums.length




class Solution {
    public int maximumScore(int[] heights, int k) {
        int n=heights.length;
        Stack<Integer> s1 =  new Stack<Integer>();
        int[] l = new int[n];
        Stack<Integer> s2 =  new Stack<Integer>();
        int[] r = new int[n];
        for(int i=0;i<n;i++){
            
            if(s1.isEmpty()){
                l[i]=0;
                s1.push(0);
            }else{
                while(!s1.isEmpty() && heights[s1.peek()]>=heights[i]){
                    s1.pop();
                }
                if(s1.isEmpty()){
                    l[i]=0;
                }else{
                    l[i]=s1.peek()+1;
                }
                s1.push(i);
            }
            
        }
        for(int i=n-1;i>=0;i--){
            
            if(s2.isEmpty()){
                r[i]=n-1;
                s2.push(i);
            }else{
                while(!s2.isEmpty() && heights[s2.peek()]>=heights[i]){
                    s2.pop();
                }
                if(s2.isEmpty()){
                    r[i]=n-1;
                }else{
                    r[i]=s2.peek()-1;
                }
                s2.push(i);
            }
            
        }
        int max=0;
        for(int i=0;i<n;i++){
            if(r[i]>=k && l[i]<=k){
                int area=heights[i]*(r[i]-l[i]+1);
                max=Math.max(max,area);
            }
            
        }
        return max;
    }
}
