1249. Minimum Remove to Make Valid Parentheses
Medium
5.6K
102
Companies

Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

    It is the empty string, contains only lowercase characters, or
    It can be written as AB (A concatenated with B), where A and B are valid strings, or
    It can be written as (A), where A is a valid string.

 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

 

Constraints:

    1 <= s.length <= 105
    s[i] is either'(' , ')', or lowercase English letter.


class Solution {
    public String minRemoveToMakeValid(String s) {
        int n=s.length();
        char[] arr= s.toCharArray();
        int op=0;
        String ans="";
        for(int i=0;i<n;i++){
            char ch = s.charAt(i);
            if(ch=='('){
                op++;
            }
            else if(op==0 && ch==')') arr[i]='*';
            else if(op>0 && ch==')'){
                op--;
            }
        }
        for(int i=arr.length-1;i>=0;i--){
            if(arr[i]=='('){
                arr[i]='*';
                op--;
            }
            if(op==0) break;
        }
        for(int i=0;i<n;i++){
            if(arr[i]!='*'){
                ans=ans+arr[i];
            }
        }
        return ans;
    }
}

// using Stack
class Solution {
    public String minRemoveToMakeValid(String s) {
        int n=s.length();
        Stack<Character> st = new Stack<Character>();
        int op=0;
        for(int i=0;i<n;i++){
            char ch = s.charAt(i);
            if(ch=='('){
                st.push(ch);
                op++;
            }
            else if(op==0 && ch==')')continue;
            else if(op>0 && ch==')'){
                op--;
                st.push(ch);
            }
            else st.push(ch);
        }
        String ans="";
    
        while(!st.isEmpty()){
            if(st.peek()=='(' && op!=0){
                st.pop();
                op--;
            }
            else{
                ans=st.pop()+ans;
            }
        }
        return ans;
    }
}
