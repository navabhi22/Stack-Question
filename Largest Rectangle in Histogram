
/*
84. Largest Rectangle in Histogram
Hard
13.7K
193
Companies

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:

Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Example 2:

Input: heights = [2,4]
Output: 4

 

Constraints:

    1 <= heights.length <= 105
    0 <= heights[i] <= 104
*/

// brute force solution complexity, O(n^2).
//TLE
class Solution {
    public int largestRectangleArea(int[] heights) {
        int max=0;
        int n=heights.length;
        for(int i=0;i<n;i++){
            int j=i;
            while(j>=0 && j< n && heights[j]>=heights[i]){
                j--;
            }
            j++;
            int k=i;
            while(k>=0 && k< n && heights[k]>=heights[i]){
                k++;
            }
             int curr=heights[i]*(k-j);
             System.out.println(k+" "+j+" "+curr +",");
             max=Math.max(curr,max);
        }
        return max;
    }
}

// O(n) slution using stack
class Solution {
    public int largestRectangleArea(int[] heights) {
        int n=heights.length;
        Stack<Integer> s1 =  new Stack<Integer>();
        int[] l = new int[n];
        Stack<Integer> s2 =  new Stack<Integer>();
        int[] r = new int[n];
        for(int i=0;i<n;i++){
            
            if(s1.isEmpty()){
                l[i]=0;
                s1.push(0);
            }else{
                while(!s1.isEmpty() && heights[s1.peek()]>=heights[i]){
                    s1.pop();
                }
                if(s1.isEmpty()){
                    l[i]=0;
                }else{
                    l[i]=s1.peek()+1;
                }
                s1.push(i);
            }
            
        }
        for(int i=n-1;i>=0;i--){
            
            if(s2.isEmpty()){
                r[i]=n-1;
                s2.push(i);
            }else{
                while(!s2.isEmpty() && heights[s2.peek()]>=heights[i]){
                    s2.pop();
                }
                if(s2.isEmpty()){
                    r[i]=n-1;
                }else{
                    r[i]=s2.peek()-1;
                }
                s2.push(i);
            }
            
        }
        int max=0;
        for(int i=0;i<n;i++){
            int area=heights[i]*(r[i]-l[i]+1);
            max=Math.max(max,area);
        }
        return max;
    }
}
