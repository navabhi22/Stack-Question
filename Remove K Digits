402. Remove K Digits
Medium
7.3K
310
Companies

Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

 

Constraints:

    1 <= k <= num.length <= 105
    num consists of only digits.
    num does not have any leading zeros except for the zero itself.


class Solution {
    public String removeKdigits(String num, int k) {
        int n =num.length();
        Stack<Character> st = new Stack<Character>();
        st.push(num.charAt(0));
        for(int i=1;i<n;i++){
            char ch =num.charAt(i);
                while(!st.isEmpty() && st.peek()>ch && k>0){
                    st.pop(); k--;
                }
                st.push(ch);
        }
        while(k!=0){
            st.pop();
            k--;
        }
        String ans="";
       while(!st.isEmpty()){
           ans=st.pop()+ans;
       }
       while(ans.length()>0 && ans.charAt(0)=='0'){
           ans=ans.substring(1);
       }
       if(ans=="") return "0";
        return ans;
    }
}
